{"version":3,"sources":["../index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["const sqlite3 = require('sqlite3').verbose(),\n      Sequelize = require('sequelize'),\n      request = require('request'),\n      express = require('express'),\n      Promise = require(\"bluebird\"),\n      rp = require('request-promise'),\n      fs = Promise.promisifyAll(require('fs')); // adds Async() versions that return promises\n\nconst { PORT=3000, NODE_ENV='development', DB_PATH='./db/database.db' } = process.env;\n\nvar db = new sqlite3.Database('./db/database.db');\n      \nvar app = express();\n\n// ROUTES\napp.get('/films/:id/recommendations',  getFilmRecommendations);\n  \nasync function getFilmRecommendations(req, res, next) {\n  let id = req.params.id;\n  console.log(`ID:`  + id);\n  if(!areValidQueryParameters(id)){\n    console.log(`validating ID: ${id}`);\n    return res.status(422).json({message: \"Invalid id parameter.  Only an integer is allowed.\"});\n  };\n  let limit = req.query.limit;\n  console.log(limit);\n  let offset = req.query.offset;\n  console.log(offset);\n  if(!areValidQueryParameters(limit)){\n    console.log(`validating limit: ${limit}`);\n    return res.status(422).json({message: \"Invalid limit query.  Only an integer is allowed.\"});\n  };\n  if(!areValidQueryParameters(offset)){\n    console.log(`validating offset: ${offset}`);\n    return res.status(422).json({message: \"Invalid offset query.  Only an integer is allowed.\"});\n  };\n  let date;\n  let genre;\n  try{\n    date = await getReleaseDate(id); \n    genre = await getGenre(id);\n  }catch(err){\n    return res.status(404).json({message: `The film_id ${id} was not found.`});\n  }\n  console.log(`date.releaseDate: ${date.releaseDate}`);\n  let relatedFilmsArray = [];\n  relatedFilmsArray = await makeDBcall(id,date.releaseDate);\n  console.log(`relatedFilmsArray.length: ${relatedFilmsArray.length}`);\n  let filteredObjects =  await filterOutFilms(relatedFilmsArray, genre);\n  let finalListOfObjectsLimitedAndOffset = \n      limitAndOffsetResults( await addTitleReleaseDateAndGenre(filteredObjects), limit, offset);\n  let responseObject = \n  {\n    recommendations: finalListOfObjectsLimitedAndOffset,\n    meta: await meta(limit, offset)\n  };\n  return res.status(200).json(responseObject);\n};\n\nfunction areValidQueryParameters(param){\n  let regex = new RegExp('^\\\\d+$');\n  if(param == undefined){\n    return true;\n  }\n  if(regex.test(param)){\n    console.log(`VALID param: ${param}`);\n      return true;\n    }\n  console.log(`INVALID param: ${param}`);\n  return false;\n}\n\nasync function makeDBcall(id,date){\n  console.log(`Start makeDBcall().`)\n  return new Promise(function (resolve, reject) {\n    let responseObj;\n    console.log(\"date.release_date: \" + date);\n    // let sql = `SELECT \"id\" FROM films WHERE \"release_date\" BETWEEN date(\"1984-11-17\",\"-15 years\") AND date(\"1999-11-17\", \"+15 years\") AND \"genre_id\" = (SELECT \"genre_id\" FROM films WHERE \"id\" = \"10164\")`;\n    db.all(`SELECT \"id\" FROM films WHERE \"release_date\" BETWEEN date(?,\"-15 years\") AND date(?, \"+15 years\") AND \"genre_id\" = (SELECT \"genre_id\" FROM films WHERE \"id\" = ?)`,\n      date,\n      date,\n      id,\n      function cb(err, rows) {\n      if (err) {\n        let message = `The film_id ${id} was not found.`\n        responseObj = {\n          message: message\n        };\n        console.log(`ERROR: ${responseObj.message}.`)\n        reject(responseObj);\n      } else {\n        responseObj = {\n          rows: rows\n        };\n        // console.log(\"makeDBcall() repsonseObj.rows\" + JSON.stringify(responseObj.rows));\n        resolve(responseObj.rows);\n      }\n    });\n  });\n}\n\nasync function getReleaseDate(id){\n  console.log(\"Starting getReleaseDate().\")\n  let sql = `SELECT \"release_date\" FROM films WHERE \"id\" = ?`;\n  let message = `The film_id ${id} was not found.`;\n  return new Promise(function (resolve, reject) {\n    let responseObj;\n    db.all(sql, id, function cb(err, rows) {\n      if (err) {\n        responseObj = {\n          message: message\n        };\n        console.log(`getReleaseDate() ERROR: ${responseObj.message}.`)\n        reject(responseObj);\n      } else {\n        if(rows.length===0){\n          responseObj = {\n            message: message\n          };\n          console.log(`getReleaseDate() ERROR: ${responseObj.message}.`)\n          reject(new Error(responseObj));\n        } else { \n          responseObj = {\n            releaseDate: rows[0].release_date\n          };\n          console.log(\"getReleaseDate() repsonseObj.rows length: \" + rows.length + ` string: ` + JSON.stringify(responseObj.releaseDate));\n        }\n        resolve(responseObj);\n      }\n    });\n  });\n}\n\nasync function getGenre(id){\n  console.log(\"Starting getGenre().\")\n  let sql = `SELECT \"name\" FROM genres WHERE \"id\" = (SELECT \"genre_id\" FROM films WHERE \"id\" = ?)`;\n  let message = `The film_id ${id} was not found.`;\n  return new Promise(function (resolve, reject) {\n    let responseObj;\n    db.all(sql, id, function cb(err, rows) {\n      if (err) {\n        responseObj = {\n          message: message\n        };\n        console.log(`getGenre() ERROR: ${responseObj.message}.`)\n        reject(responseObj);\n      } else {\n        if(rows.length===0){\n          responseObj = {\n            message: message\n          };\n          console.log(`getGenre() ERROR: ${responseObj.message}.`)\n          reject(new Error(responseObj));\n        } else { \n          responseObj = {\n            name: rows[0].name\n          };\n          console.log(`getGenre() repsonseObj.rows` + JSON.stringify(responseObj.name));\n        }\n        resolve(responseObj);\n      }\n    });\n  });\n}\n\nasync function getTitleReleaseDate(id){\n  console.log(\"Starting getTitleReleaseDate().\")\n  let sql = `SELECT \"title\", \"release_date\" FROM films WHERE \"id\" = ?`;\n  return new Promise(function (resolve, reject) {\n    let responseObj;\n    db.all(sql, id, function cb(err, rows) {\n      if (err) {\n        responseObj = {\n          'error': err\n        };\n        console.log(`ERROR: ${responseObj.error}.`)\n        reject(responseObj);\n      } else {\n        responseObj = {\n          rows: rows\n        };\n        console.log(\"getTitleReleaseDate() repsonseObj.rows\" + JSON.stringify(responseObj.rows));\n        resolve(responseObj.rows);\n      }\n    });\n  });\n  db.close();\n}\n\nasync function filterOutFilms(relatedFilmsArray, genre){\n  console.log(`Starting filterOutFilms.`)\n  let relatedFilmsCSV = relatedFilmsArray.map(function(elem){\n      return elem.id;\n  }).join(\",\");\n  // console.log(`----relatedFilmsCSV: ${relatedFilmsCSV}`)\n  let results = [];\n  await makeCallToGetFilmReviews(relatedFilmsCSV)\n    .then(function(response) {\n      results = response;\n    }).catch(function (err) {\n      // TODO\n      // Deal with the error\n    }\n  );\n  results = await filterByNumberRatingsAndNumberOfReview(results, genre);\n  return results;\n};\n\nasync function makeCallToGetFilmReviews(relatedFilmsCSV){\n  const options = {\n    method: 'GET',\n    uri: `http://credentials-api.generalassemb.ly/4576f55f-c427-4cfc-a11c-5bfe914ca6c1`,\n    json: true,\n    qs: {\n      films: relatedFilmsCSV\n    } \n  }\n  return rp(options);\n}\n\nfunction filterByNumberRatingsAndNumberOfReview(results, genre){\n  console.log(`Starting filterByNumberRatingsAndNumberOfReview.`);\n  let filteredResults = [];\n  for (var i = 0, len = results.length; i < len; i++) {\n    let averageRating = calculateAverageRating(results[i].reviews);\n    // console.log(averageRating);\n    if(results[i].reviews.length >= 5 && averageRating >= 4){\n      results[i].id = results[i].film_id;\n      results[i].title = '';\n      results[i].releaseDate = ''; \n      results[i].genre = genre.name;\n      results[i].averageRating = averageRating;\n      results[i].reviews = results[i].reviews.length;\n      delete results[i].film_id;\n      filteredResults.push(results[i]);\n    }\n  }\n  // console.log(`filteredResults: ${filteredResults.length} ${filteredResults.toString()}`)\n  return filteredResults;\n}\n\nfunction calculateAverageRating(results){\n  let sumOfRating = 0;\n  for (var i = 0, len = results.length; i < len; i++) {\n    // console.log(results.rating);\n    sumOfRating = sumOfRating + results[i].rating;\n  }\n  return parseFloat((sumOfRating/results.length).toFixed(2));\n};\n\n//TODO \nasync function addTitleReleaseDateAndGenre(filteredObjects){\n  console.log(`Starting addTitleReleaseDate()`);\n  for (let [index,value] of filteredObjects.entries()) {\n    console.log(`VALUE: ${value.id} and INDEX: ${index}`);\n    let titleAndDate = await getTitleReleaseDate(value.id);\n    filteredObjects[index].title = titleAndDate[0].title;\n    filteredObjects[index].releaseDate = titleAndDate[0].release_date; \n  }\n  return filteredObjects;\n};\n\nfunction limitAndOffsetResults(listOfResults, limit, offset){\n  // TODO - need to handle limit and offset case.  \n  if(limit !== undefined){\n    let listLength = listOfResults.length;\n    if(listLength>limit){\n      let numberOfElementsToRemove = listLength - limit;\n      while(numberOfElementsToRemove>0){\n        numberOfElementsToRemove--;\n        console.log(listOfResults.length);\n        listOfResults.splice(listOfResults.length-1);\n      }\n    }\n  }\n\n  if(offset !== undefined){\n    let shiftCounter = parseInt(offset);\n    while(shiftCounter>0){\n      shiftCounter--;\n      listOfResults.shift();\n    }\n  }\n  \n\n  return listOfResults;\n }\n\n// TODO\nasync function meta(limit, offset){\n  if(limit == undefined){\n    limit = 10;\n  }\n  if (offset == undefined){\n    offset = 0;\n  }\n  return { limit: limit, offset: offset};\n}\n\n// START SERVER\nPromise.resolve()\n.then(() => app.listen(PORT, () => console.log(`App listening on port ${PORT}`)))\n.catch((err) => { if (NODE_ENV === 'development') console.error(err.stack); });\n\napp.use(function (req, res, next) {\n  res.status(404).json({message: 'Route not found.'});\n})\n\napp.use(function (err, req, res, next) {\n  console.error(err.stack)\n  res.status(500).send({message: err.message})\n})\n\nmodule.exports = app;\n\n\n\n\n  "]}